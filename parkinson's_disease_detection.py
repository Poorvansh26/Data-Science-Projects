# -*- coding: utf-8 -*-
"""Parkinson's Disease Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9Q0rnCmeCEXu0l_KtdbkNM8w_am4LqC

Parkinson's disease dataset from kaggle
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/parkinsons.csv')
data.head()

data.shape

data.info()

data.isnull().sum()

data.describe()

data['status'].value_counts()

"""0 ----> Healthy

1 ----> Parkinson's Positive
"""

data.groupby('status').mean()

"""Seperating the features and target

"""

X = data.drop(columns=['name','status'], axis = 1)
Y = data['status']
print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Data Standardisation"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

from sklearn import svm
model = svm.SVC(kernel='linear')

model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print('Accuracy score of training data : ',training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('Accuracy score of test data : ',test_data_accuracy)

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if(prediction[0] == 0):
 print("The Person does not have Parkinson's Disease")

else:
 print("The Person has Parkinson's")